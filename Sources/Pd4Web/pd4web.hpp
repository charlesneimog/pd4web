#pragma once

#ifndef __EMSCRIPTEN__
#error "This module requires Emscripten."
#endif

// strings
#include <algorithm>
#include <format>
#include <iostream>
#include <sstream>
#include <mutex>
#include <condition_variable>

// emscripten
#include <emscripten.h>
#include <emscripten/bind.h>
#include <emscripten/val.h>
#include <emscripten/webaudio.h>

// libpd
#include <z_libpd.h>
#include <z_print_util.h>
#include <z_queued.h>

#include <m_pd.h>

#include <g_canvas.h>
#include <m_imp.h>
#include <s_stuff.h>

extern "C" {
#include "config.h"
}

static uint8_t WasmAudioWorkletStack[1024 * 1024];
void Pd4WebInitExternals(); // defined in externals.cpp (generated by pd4web compiler)
//

#if PD4WEB_LUA
extern "C" {
#include <lauxlib.h>
#include <lua.h>
#include <lualib.h>
#include <pdlua.h>
extern lua_State *__L();
extern int pd4weblua_draw();
extern void pdlua_setup();
}
#endif

#define ICON_SOUND_OFF                                                                                                 \
    "data:image/"                                                                                                      \
    "svg+xml;base64,"                                                                                                  \
    "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA1NzYgNTEyIj48IS0tIUZv"                     \
    "bnQgQXdlc29tZSBGcmVlIDYuNi4wIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vu"                     \
    "c2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlL2ZyZWUgQ29weXJpZ2h0IDIwMjQgRm9udGljb25zLCBJ"                     \
    "bmMuLS0+"                                                                                                         \
    "PHBhdGggZD0iTTMwMS4xIDM0LjhDMzEyLjYgNDAgMzIwIDUxLjQgMzIwIDY0bDAgMzg0YzAgMTIuNi03LjQgMjQtMTgu"                     \
    "OSAyOS4ycy0yNSAzLjEtMzQuNC01LjNMMTMxLjggMzUyIDY0IDM1MmMtMzUuMyAwLTY0LTI4LjctNjQtNjRsMC02NGMw"                     \
    "LTM1LjMgMjguNy02NCA2NC02NGw2Ny44IDBMMjY2LjcgNDAuMWM5LjQtOC40IDIyLjktMTAuNCAzNC40LTUuM3pNNDI1"                     \
    "IDE2N2w1NSA1NSA1NS01NWM5LjQtOS40IDI0LjYtOS40IDMzLjkgMHM5LjQgMjQuNiAwIDMzLjlsLTU1IDU1IDU1IDU1"                     \
    "YzkuNCA5LjQgOS40IDI0LjYgMCAzMy45cy0yNC42IDkuNC0zMy45IDBsLTU1LTU1LTU1IDU1Yy05LjQgOS40LTI0LjYg"                     \
    "OS40LTMzLjkgMHMtOS40LTI0LjYgMC0zMy45bDU1LTU1LTU1LTU1Yy05LjQtOS40LTkuNC0yNC42IDAtMzMuOXMyNC42"                     \
    "LTkuNCAzMy45IDB6Ii8+PC9zdmc+"

#define ICON_SOUND_ON                                                                                                  \
    "data:image/"                                                                                                      \
    "svg+xml;base64,"                                                                                                  \
    "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA2NDAgNTEyIj48IS0tIUZv"                     \
    "bnQgQXdlc29tZSBGcmVlIDYuNi4wIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vu"                     \
    "c2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlL2ZyZWUgQ29weXJpZ2h0IDIwMjQgRm9udGljb25zLCBJ"                     \
    "bmMuLS0+"                                                                                                         \
    "PHBhdGggZmlsbD0iIzAwMDAwMCIgZD0iTTUzMy42IDMyLjVDNTk4LjUgODUuMiA2NDAgMTY1LjggNjQwIDI1NnMtNDEu"                     \
    "NSAxNzAuNy0xMDYuNCAyMjMuNWMtMTAuMyA4LjQtMjUuNCA2LjgtMzMuOC0zLjVzLTYuOC0yNS40IDMuNS0zMy44QzU1"                     \
    "Ny41IDM5OC4yIDU5MiAzMzEuMiA1OTIgMjU2cy0zNC41LTE0Mi4yLTg4LjctMTg2LjNjLTEwLjMtOC40LTExLjgtMjMu"                     \
    "NS0zLjUtMzMuOHMyMy41LTExLjggMzMuOC0zLjV6TTQ3My4xIDEwN2M0My4yIDM1LjIgNzAuOSA4OC45IDcwLjkgMTQ5"                     \
    "cy0yNy43IDExMy44LTcwLjkgMTQ5Yy0xMC4zIDguNC0yNS40IDYuOC0zMy44LTMuNXMtNi44LTI1LjQgMy41LTMzLjhD"                     \
    "NDc1LjMgMzQxLjMgNDk2IDMwMS4xIDQ5NiAyNTZzLTIwLjctODUuMy01My4yLTExMS44Yy0xMC4zLTguNC0xMS44LTIz"                     \
    "LjUtMy41LTMzLjhzMjMuNS0xMS44IDMzLjgtMy41em0tNjAuNSA3NC41QzQzNC4xIDE5OS4xIDQ0OCAyMjUuOSA0NDgg"                     \
    "MjU2cy0xMy45IDU2LjktMzUuNCA3NC41Yy0xMC4zIDguNC0yNS40IDYuOC0zMy44LTMuNXMtNi44LTI1LjQgMy41LTMz"                     \
    "LjhDMzkzLjEgMjg0LjQgNDAwIDI3MSA0MDAgMjU2cy02LjktMjguNC0xNy43LTM3LjNjLTEwLjMtOC40LTExLjgtMjMu"                     \
    "NS0zLjUtMzMuOHMyMy41LTExLjggMzMuOC0zLjV6TTMwMS4xIDM0LjhDMzEyLjYgNDAgMzIwIDUxLjQgMzIwIDY0bDAg"                     \
    "Mzg0YzAgMTIuNi03LjQgMjQtMTguOSAyOS4ycy0yNSAzLjEtMzQuNC01LjNMMTMxLjggMzUyIDY0IDM1MmMtMzUuMyAw"                     \
    "LTY0LTI4LjctNjQtNjRsMC02NGMwLTM1LjMgMjguNy02NCA2NC02NGw2Ny44IDBMMjY2LjcgNDAuMWM5LjQtOC40IDIy"                     \
    "LjktMTAuNCAzNC40LTUuM3oiLz48L3N2Zz4="

// ╭─────────────────────────────────────╮
// │            Gui Interface            │
// ╰─────────────────────────────────────╯
#include <GLES3/gl3.h>
#define NANOVG_GLES3_IMPLEMENTATION
#include <nanovg.h>
#include <nanovg_gl.h> // or nanovg_gl3.h depending on your setup
#include <nanovg_gl_utils.h>

class Pd4Web;

enum Pd4WebSenderType { BANG = 0, FLOAT, SYMBOL, LIST, MESSAGE };
struct Pd4WebUserData {
    Pd4Web *pd4web;
    t_pdinstance *libpd;

    // sound
    bool soundInit;
    bool soundSuspended;
    std::string soundToggleSel;

    // canvasSel
    std::string canvasSel;

    // processing audio;
    std::mutex mtx;
    std::condition_variable cv;
    bool drawing = false;
    bool processing = false;

    // mouse
    bool mousedown;
    bool doit;
    int xpos;
    int ypos;
    int canvas_width;
    int canvas_height;
    float devicePixelRatio;
    t_gobj *obj;
    t_canvas *canvas;

    // key
    std::string key;

    // rendering optimization
    bool first_frame = true;
    int font_handler = 0;
    EMSCRIPTEN_WEBGL_CONTEXT_HANDLE ctx;
    NVGcontext *vg;
    bool contextReady = false;
};

void loop(void *userData);
void create_webgl_context(Pd4WebUserData *ud);

// ╭─────────────────────────────────────╮
// │           PdLua Graphics            │
// ╰─────────────────────────────────────╯
struct PdLuaObjGuiLayer {
    bool dirty = false;
    bool drawing = false;

    // pdlua
    std::string layer_id;
    std::vector<GuiCommand> gui_commands;
    int size;

    // framebuffer
    int objx;
    int objy;
    int objw;
    int objh;
    NVGLUframebuffer *fb = nullptr;
    float last_zoom = 0; // Track last zoom to detect changes
};
using PdLuaObjLayers = std::unordered_map<int, PdLuaObjGuiLayer>;
using PdLuaObjsGui = std::unordered_map<std::string, PdLuaObjLayers>;
using PdInstanceGui = std::unordered_map<t_pdinstance *, PdLuaObjsGui>;

// ╭─────────────────────────────────────╮
// │             Main Class              │
// ╰─────────────────────────────────────╯
class Pd4Web {
  public:
    ~Pd4Web() {
        libpd_free_instance(m_NewPdInstance);
        delete m_SoundToggle;
        delete m_MouseListener;
        delete m_MainLoop;
    }

    // Main
    void init();
    void suspendAudio();
    void openPatchJS(const std::string &patchPath, emscripten::val options);

    // send Messages
    void sendFloat(std::string r, float f);
    void sendSymbol(std::string r, std::string s);
    void sendBang(std::string r);
    void sendList(const std::string &r, emscripten::val jsArray);
    void sendMessage(const std::string &r, const std::string &s, emscripten::val jsArray);

    // receive
    void receivedFloat(const char *r, float f);
    void receivedSymbol(const char *r, const char *s);
    void receivedList(const char *r, int argc, t_atom *argv);
    void receivedMessage(const char *r, const char *s, int argc, t_atom *argv);

    // midi
    void midiByte(uint8_t byte1, uint8_t byte2, uint8_t byte3);

    // bind
    void bind(std::string r, std::string func);
    void unbind(std::string r);

    // TODO: make private
    EMSCRIPTEN_WEBAUDIO_T m_Context;
    int lastMouseX;
    int lastMouseY;

  private:
    void openPatch(std::string PatchPath, std::string PatchCanvaId, std::string soundToggleId);
    void startMidi();

    bool m_ThemeDefined = false;
    bool m_DarkTheme = false;

    // TODO: remove pointers
    Pd4WebUserData *m_SoundToggle;
    Pd4WebUserData *m_MouseListener;
    Pd4WebUserData *m_MainLoop;

    std::string canvasId;
    bool m_Pd4WebInit = false;
    bool m_PdInit = false;
    bool m_audioSuspended = false;

    t_pdinstance *m_NewPdInstance;
};

// ╭─────────────────────────────────────╮
// │  Bind C++ functions to JavaScript   │
// ╰─────────────────────────────────────╯
EMSCRIPTEN_BINDINGS(WebPd) {
    emscripten::class_<Pd4Web>("Pd4Web")
        .constructor<>() // Default constructor
        .function("init", &Pd4Web::init)
        .function("openPatch", &Pd4Web::openPatchJS)
        .function("suspendAudio", &Pd4Web::suspendAudio)

        // senders
        .function("sendBang", &Pd4Web::sendBang)
        .function("sendFloat", &Pd4Web::sendFloat)
        .function("sendSymbol", &Pd4Web::sendSymbol)
        .function("sendList", &Pd4Web::sendList)
        .function("sendMessage", &Pd4Web::sendMessage)

        // bind and unbind receivers
        .function("bind", &Pd4Web::bind)
        .function("unbind", &Pd4Web::unbind)

        // Midi
        .function("_midiByte", &Pd4Web::midiByte);
}
