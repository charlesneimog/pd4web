{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p> Welcome to the <code>pd4web</code> documentation! </p> <p> </p>"},{"location":"#what-is-pd4web","title":"What is pd4web?","text":"<p> <code>pd4web</code> enables PureData functionality directly in web browsers. Not just the vanilla Pd, but Pd with all the externals! </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li><code>Streamlined Development</code>: Create fully online audio applications with a visual approach.</li> <li><code>Easy Access</code>: Performers can access compositions without complex PureData setups or library dependencies.</li> <li><code>Live Electronic Music Preservation</code>: Explore the potential of WebAudioApps to maintain the integrity of live electronic works. <code>pd4web</code> will download and make a repository for all code you need to run your music.</li> </ul>"},{"location":"#examples","title":"Examples Scofo FollowerDidactic patchesVexFlow, Choir, and <code>pd4web</code><code>p5js</code> with <code>pd4web</code>Physical Modelling with <code>pmpd</code>cartographie <code>p5js</code> + puredata<code>p5js</code>, <code>ml5</code> and <code>pd4web</code>","text":"<p>       Show the use of the object <code>o.scofo~</code> with pd4web. Personal       project for live-electronics.     </p> <p>       Used to exemplify the concept of Local Maxima used on Partial Tracking.     </p> <p>         Online algorithm piece that generate the piece based in the real-time spectrum.     </p> <p><code>p5js</code> and <code>pd4web</code> used together.</p> <p>         Using Physical Modelling for Synthesis.     </p> <p>Project from Jean-Yves Gratius.</p> <p>Hand recognition with PureData. Stealing code from the Code-Train channel</p>"},{"location":"#about-me","title":"About me","text":"<p>         I am Charles K. Neimog, a composer and researcher in the field of computer music. <code>pd4web</code> is a project to make possible the use of PureData in web browsers, improving the accessibility of electronic music.      </p>"},{"location":"devs/","title":"Adding Externals Support (Devs)","text":"<p>For Developers of Pd Objects</p> <p>This section is intended for those developing Pd objects and looking to add the object to <code>pd4web</code>. If this doesn't apply to you, feel free to skip this section.</p>"},{"location":"devs/#pd4web-adding-support-to-externals","title":"pd4web: Adding Support to Externals","text":"<p><code>pd4web</code> consists of a set of tools accessible via a Python module named pd4web. Internally, pd4web utilizes <code>EMSCRIPTEN</code> to compile external components into dynamic static libraries.</p> <p>To integrate a new library, you must create a <code>CMakeLists.txt</code>. It's highly recommended to use pd.cmake due to assumptions made (such as the TARGET name convention like <code>earplug~</code> becoming <code>earplug_tilde</code> and others). After creating the <code>CMakeLists.txt</code> for the library you need, you can submit a PR that modifies <code>Externals.yaml</code> within <code>Sources/pd4web/Libraries</code>. In this file, simply add a new entry similar to the provided example. This will make the library compatible with <code>pd4web</code>. </p> <p>This is an example of how to define a library in the <code>Externals.yaml</code> file:</p> <pre><code>  - Name: cyclone # name of the pd library\n    Source: GITHUB # source\n    Developer: porres # in this case, Github user name\n    Repository: pd-cyclone # in this case, Github Repo\n    Version: cyclone_0.7-0 # version (tag name of stable commit hash)\n</code></pre> <p>Below the complete fields for enviroment.</p> <p></p>   Key Name   Description <code>Name</code> With name you specify the name of the library, for example <code>else</code>, <code>cyclone</code>, <code>timbreIdLib</code>. <code>Developer</code> The username of the user where the repository is hosted. For example <code>porres</code>. <code>Repository</code> The name of the repository where it is hosted. For example <code>pd-else</code>. <code>Source</code> The download source, it must be <code>GITHUB_RELEASES</code> or <code>GITHUB_TAGS</code>. <p></p>"},{"location":"devs/#building-the-cmakeliststxt","title":"Building the CmakeLists.txt","text":"<p>The <code>CMakeLists.txt</code> file is the most important file for the compilation of the external. It defines the external's name, the source files, and the dependencies. The following is an example of a <code>CMakeLists.txt</code> file for the <code>earplug~</code> library/object.</p> <pre><code>cmake_minimum_required(VERSION 3.25)\nproject(earplug~)\nset(LIB_DIR \"${PD4WEB_EXTERNAL_DIR}/${PROJECT_NAME}\")\n\npd_add_external(earplug~ \"${LIB_DIR}/earplug.c\")\n</code></pre> <p>Note that, <code>pd_add_external</code> is a function provided by the <code>pd.cmake</code> module. The first argument is the external's name, and the second argument is the source file. </p> <p>The <code>LIB_DIR</code> variable is used to define the external's directory. This directory will be <code>${PD4WEB_EXTERNAL_DIR}</code> followed by the library external name defined in the <code>Externals.yaml</code> file.</p> <p><code>PD4WEB_EXTERNAL_DIR</code> is a variable that points to the directory where the external's source files are located. It is defined in the <code>CMakeLists.txt</code> generated by <code>pd4web</code> (you don't need to define it).</p>"},{"location":"libraries/","title":"Libraries","text":""},{"location":"libraries/#supported-objects","title":"Supported Objects","text":"<p> List of Pd externals supported by <code>pd4web</code>. </p> Library Name Description Numbers of Objects Numbers of Abs Main Dev pd-else <code>else</code> is a library required. It make a lot of things easier. 337 242 Alexandre Porres pd-cyclone <code>cyclone</code> clone a lot of Max objects. 271 2 Alexandre Porres timbreIDLib Music Analisys and MIR in general. 110 0 Willian Brent pmpd Physical Modeling for PureData 32 0 Cyrille Henry o.scofo~ Score Follower. 1 0 Charles K. Neimog ambi~ Ambisonics object for PureData using libspatialaudio (from VLC). 1 0 Charles K. Neimog pd-soundtouch <code>[soundtouch~]</code> is a transposition object for Pd 1 0 Katja Vetter pd-partialtrack Library for Partial Tracking 1 0 Charles K. Neimog pd-fftease FFTease is a collection of objects designed to facilitate spectral sound processing in Max and Pd. 37 0 Eric Lyon and Christopher Penrose earplug~ Binaural filter based on KEMAR impulse measurement for Pd. 1 0 Dan Wilcox and Chikashi Miyama pdlua Lua bindings for Pd, updated for Lua 5.3+ 1 0 Claude Heiland-Allen, Martin Peach, Albert Gr\u00e4f and Timothy Schoen <p>     Almost 1000 objects are supported by <code>pd4web</code>, more is coming. </p> <p> Need another library? Please let us know on GitHub. </p>"},{"location":"js/engine/","title":"Engine","text":"<p><code>Pd4Web</code> is mainly designed for Pd users, people that actually don't code. So here some options to use the <code>Pd4Web</code> audio backend.</p>"},{"location":"js/engine/#disabling-gui-interface","title":"Disabling Gui Interface","text":"<p>To compile your patch without the GUI interface, you need to use the <code>-nogui</code> flag. This will disable the GUI interface and will use the <code>Pd4Web</code> audio backend.</p> <p>When disabling the Gui interface, you need to init <code>pd4web</code> for yourself. </p> <p>Mic input use</p> <p>Always that you use the Mic input (<code>adc~</code>), you must init <code>pd4web</code> from a user gesture (click).</p> <p>For example, in this example below I init <code>pd4web</code> from a click anywhere in the main page.</p> <pre><code>var Pd4Web = null; // Pd4Web object must be declared in the global scope and the name must be Pd4Web\nPd4WebModule().then((Pd4WebModulePromise) =&gt; {\n    Pd4Web = new Pd4WebModulePromise.Pd4Web();\n});\n\ndocument.addEventListener(\n    \"click\",\n    async () =&gt; {\n        Pd4Web.init();\n    },\n    { once: true }, // Ensures this only runs once\n);\n</code></pre>"},{"location":"js/js/","title":"Js","text":""},{"location":"js/js/#pd4webmodule","title":"Pd4WebModule","text":"<p>For Those Familiar with JavaScript</p> <p>This section is for anyone with JavaScript knowledge who wants to explore interactions with the <code>pd4web</code> project. If you're not comfortable with JavaScript, you can skip this section.</p> <p>The <code>pd4web</code> project includes a JavaScript module named <code>Pd4WebModule</code>. In the <code>index.html</code> file inside the <code>WebPatch</code> directory, <code>Pd4Web</code> is loaded as follows:</p> <pre><code>var Pd4Web = null;\nPd4WebModule().then((Pd4WebModulePromise) =&gt; {\n    // load method\n    Pd4Web = new Pd4WebModulePromise.Pd4Web();\n});\n</code></pre>"},{"location":"js/js/#opening-a-patch","title":"Opening a Patch","text":""},{"location":"js/js/#pd4webopenpatch","title":"<code>Pd4Web.openPatch</code>","text":"<p>After you have loaded <code>Pd4Web</code>, you can open a patch using the following code:</p> <p>Patches must be compiled!</p> <p>Patches files MUST be compiled; simply placing a new patch inside a folder will not work. <code>Pd4Web</code> has its file system, which is automatically built when you compile the patch. This means that files available on our website will not necessarily be available in the patch.</p> <pre><code>Pd4Web.openPatch(\"index.pd\", {\n    canvasId: \"Pd4WebCanvas\",\n    soundToggleId: \"Pd4WebAudioSwitch\",\n    patchZoom: 2,\n    projectName: \"MyProject\",\n    channelCountIn: 1,\n    channelCountOut: 2,\n    sampleRate: 48000,\n    renderGui: true,\n    requestMidi: false,\n    fps: 0,\n});\n</code></pre> <ul> <li><code>canvasId</code> - The ID of the canvas (must be a <code>&lt;canvas&gt;</code>) element in your HTML where the patch will be drawn. This will be resized.</li> <li><code>soundToggleId</code> - The ID of the canvas (must be a <code>&lt;span&gt;</code>) element in your HTML where <code>Pd4Web</code> will put a listener for click (to initialize audio).</li> <li><code>patchZoom</code> - The zoom level of the patch.</li> <li><code>projectName</code> - The name of the project, <code>Pd4Web</code> will define it as title of the page.</li> <li><code>channelCountIn</code> - The number of input channels.</li> <li><code>channelCountOut</code> - The number of output channels.</li> <li><code>sampleRate</code> - The sample rate of the patch.</li> <li><code>renderGui</code> - Should <code>Pd4Web</code> render the GUI?</li> <li><code>requestMidi</code> - Should <code>Pd4Web</code> request MIDI access?</li> <li><code>fps</code> - The FPS of the patch. On <code>0</code> the browser will decide this.</li> </ul>"},{"location":"js/js/#initializing-audio-manually","title":"Initializing Audio Manually","text":""},{"location":"js/js/#pd4webtoggleaudio","title":"<code>Pd4Web.toggleAudio</code>","text":"<p>When you open the patch but does not define a <code>soundToggleId</code>, you must initialize audio manually. This must be done by click user event. For example: </p> <pre><code>document.addEventListener(\n    \"click\",\n    async () =&gt; {\n        Pd4Web.toggleAudio();\n    },\n    { once: true }, // Ensures this only runs once\n);\n</code></pre> <p>Run <code>toggleAudio</code> outside of click event</p> <p>The browser does not allow audio to play outside of a click event.</p>"},{"location":"js/js/#send-data","title":"Send data","text":"<p>If you want to send data to a Pd patch, you can use the following functions:</p>"},{"location":"js/js/#pd4websendbang","title":"<code>Pd4Web.sendBang</code>","text":"<p>Send number to Pd. </p> <pre><code>Pd4Web.sendBang(\"myreceiver\")\n</code></pre> <p>Bang will be received by <code>[r myreceiver]</code></p>"},{"location":"js/js/#pd4websendfloat","title":"<code>Pd4Web.sendFloat</code>","text":"<p>Send number to Pd. </p> <pre><code>Pd4Web.sendFloat(\"myreceiver\", 5)\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"js/js/#pd4websendsymbol","title":"<code>Pd4Web.sendSymbol</code>","text":"<p>Send symbol to Pd. </p> <pre><code>Pd4Web.sendSymbol(\"myreceiver\", \"mysymbol\")\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"js/js/#pd4websendlist","title":"<code>Pd4Web.sendList</code>","text":"<p>Send list to Pd. </p> <pre><code>Pd4Web.sendList(\"myreceiver\", [5, \"mysymbol\"])\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"js/js/#receive-data","title":"Receive data","text":"<p>To receive data from Pd you can use <code>callback</code> functions. They are defined by PureData <code>selector</code> and must be defined precisily.</p>"},{"location":"js/js/#pd4webonbangreceived","title":"<code>Pd4Web.onBangReceived</code>","text":"<p>Registers a callback function that is triggered when a <code>bang</code> is received.</p> <pre><code>Pd4Web.onBangReceived(\"r-test\", (r) =&gt; {\n    console.log(\"Received bang from\", r);\n});\n</code></pre> <p>When the patch receives a <code>bang</code> at <code>[r-test]</code>, the callback function is called.</p>"},{"location":"js/js/#pd4webonfloatreceived","title":"<code>Pd4Web.onFloatReceived</code>","text":"<p>Registers a callback function that is triggered when a <code>float</code> is received.</p> <pre><code>Pd4Web.onFloatReceived(\"r-test\", (r, f) =&gt; {\n    console.log(\"Received float:\", f);\n});\n</code></pre> <p>When the patch receives a <code>float</code> at <code>[r-test]</code>, the callback function is called.</p>"},{"location":"js/js/#pd4webonsymbolreceived","title":"<code>Pd4Web.onSymbolReceived</code>","text":"<p>Registers a callback function that is triggered when a <code>symbol</code> is received.</p> <pre><code>Pd4Web.onSymbolReceived(\"r-test\", (r, s) =&gt; {\n    console.log(\"Received symbol:\", s);\n});\n</code></pre> <p>When the patch receives a <code>symbol</code> at <code>[r-test]</code>, the callback function is called.</p>"},{"location":"js/js/#pd4webonlistreceived","title":"<code>Pd4Web.onListReceived</code>","text":"<p>Registers a callback function that is triggered when a <code>list</code> is received.</p> <pre><code>Pd4Web.onListReceived(\"r-test\", (r, l) =&gt; {\n    console.log(\"Received list:\", l);\n});\n</code></pre> <p>When the patch receives a <code>list</code> at <code>[r-test]</code>, the callback function is called.</p>"},{"location":"js/midi/","title":"Midi","text":"<ul> <li>Docs not ready yet!</li> </ul>"},{"location":"js/receive/","title":"Receive","text":"<p>You need to define something to be called when Pd receive the thing you want.</p>"},{"location":"js/receive/#pd4webonbangreceived","title":"<code>Pd4Web.onBangReceived</code>","text":"<p><pre><code>Pd4Web.onBangReceived(\"mybang\", function () { \n    console.log(\"Received a bang\");\n});\n</code></pre> To execute this you need to send a bang from Pd using <code>[s mybang]</code>.</p>"},{"location":"js/receive/#pd4webonfloatreceived","title":"<code>Pd4Web.onFloatReceived</code>","text":"<p><pre><code>Pd4Web.onFloatReceived(\"myfloat\", function (f) { \n    console.log(\"Received \" + f)\n});\n</code></pre> To execute this you need to send a float from Pd using <code>[s myfloat]</code>.</p>"},{"location":"js/receive/#pd4webonsymbolreceived","title":"<code>Pd4Web.onSymbolReceived</code>","text":"<p><pre><code>Pd4Web.onSymbolReceived(\"mysymbol\", function (s) { \n    console.log(\"Received \" + s)\n});\n</code></pre> To execute this you need to send a symbol from Pd using <code>[s mysymbol]</code>.</p>"},{"location":"js/receive/#pd4webonlistreceived","title":"<code>Pd4Web.onListReceived</code>","text":"<p><pre><code>Pd4Web.onListReceived(\"mylist\", function (mylist) { \n    console.log(\"Received list\");\n});\n</code></pre> To execute this you need to send a list from Pd using <code>[s mylist]</code>.</p> <p>On the Score Follower example in the main page, I use <code>Pd4Web.onFloatReceived</code>: </p> <pre><code>Pd4Web.onFloatReceived(\"score-render\", function (f) {\n    var svgId = notes[f].getSVGId();\n    var svgElement = document.getElementById(\"vf-\" + svgId);\n    var noteheadElement = svgElement.querySelector(\".vf-notehead\");\n    var pathElement = noteheadElement.querySelector(\"path\");\n    pathElement.setAttribute(\"fill\", \"red\");\n});\n</code></pre> <p>In this example, always that the object <code>o.scofo~</code> receive a float from the <code>score-render</code> sender I change the color of the notehead of the note that is being detected from the <code>o.scofo~</code> object to red. Check the example here, the source code, and the Pd patch.</p>"},{"location":"js/requirements/","title":"Requirements","text":"<p><code>Pd4Web</code> uses the <code>WebAudio</code> API to communicate with <code>Pd</code>. This means that you need to have a browser and a server that supports some features.</p>"},{"location":"js/requirements/#pd4webinit","title":"<code>Pd4Web.init()</code>","text":"<p><code>Pd4Web.init()</code> must be called from a user gesture, like a click or a touch event. This is a security feature of the browser to prevent the execution of scripts without user interaction.</p> <p>Just if you will use the microphone</p> <p><code>Pd4Web.init()</code> must be called from a user gesture just if you will use the microphone. </p>"},{"location":"js/requirements/#cross-origin-isolation","title":"Cross-Origin Isolation","text":"<p>COI is a security feature that allows you to restrict how your website interacts with other websites. If COI is not enabled, you will see an error message related with <code>SharedArrayBuffer</code> being not defined.</p> <p><code>Pd4Web</code> uses the script <code>pd4web.threads.js</code> to enable COI if it's not enabled from the server. But there is some limitations, first of all you need to create a redirect <code>index.html</code> file from the root of the WebSite to an specific folder. This is necessary because the <code>pd4web.threads.js</code> script needs to be in the same folder as the <code>index.html</code> file. I am yet researching a better way to do this.</p>"},{"location":"js/send/","title":"Send","text":"<p>If you want to send data to a Pd patch, you can use the following functions:</p>"},{"location":"js/send/#pd4websendfloat","title":"<code>Pd4Web.sendFloat</code>","text":"<p>Send number to Pd. </p> <pre><code>Pd4Web.sendFloat(\"myreceiver\", 5)\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"js/send/#pd4websendsymbol","title":"<code>Pd4Web.sendSymbol</code>","text":"<p>Send symbol to Pd. </p> <pre><code>Pd4Web.sendSymbol(\"myreceiver\", \"mysymbol\")\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"js/send/#pd4websendlist","title":"<code>Pd4Web.sendList</code>","text":"<p>Send list to Pd. </p> <pre><code>Pd4Web.sendList(\"myreceiver\", [5, \"mysymbol\"])\n</code></pre> <p>To receive this use one object <code>[r myreceiver]</code> in Pd.</p>"},{"location":"patch/compile/","title":"Compile","text":"<p>In this section, I will explain how to organize your project to compile your patch. It\u2019s not much different from what you\u2019re probably already doing, but you need to take special care with external files.</p> Want to know more? <p>The key issue is that all the files required by your patch must be available when the patch starts. Since we\u2019re working with the web, imagine the problem if your patch needed a large audio file in the middle of a performance and PureData had to download it just milliseconds before it's needed. This would cause significant delays and freeze your patch for some seconds. Fortunately, <code>pd4web</code> handles this issue automatically, which is why it's important to specify the relevant folders.</p>"},{"location":"patch/compile/#folder-structure","title":"Folder Structure","text":"<p>I recommend using the file structure shown below. </p> <p>Warning</p> <p>Be careful with upper and lower case letters.</p> <pre><code>\u251c\u2500 PROJECT_FOLDER\n\u2514\u2500\u2500 Audios/\n    \u251c\u2500\u2500 AllMyAudioFiles.wav\n    \u2514\u2500\u2500 AllMyAudioFiles.aif\n\u2514\u2500\u2500 Libs/\n    \u251c\u2500\u2500 pdAbstraction1.pd\n    \u2514\u2500\u2500 pdAbstraction2.pd\n\u2514\u2500\u2500 Extras/\n    \u251c\u2500\u2500 extrathings.png\n    \u2514\u2500\u2500 mygesture.svg\n\u2514\u2500\u2500 MY_MAIN_PATCH.pd\n</code></pre> <ul> <li> <p>In the <code>Audios</code> folder, you should place audio files. </p> </li> <li> <p>In the <code>Libs</code> folder you store abstractions, text files, or any other relevant items.</p> </li> <li> <p>In the <code>Extras</code> folder, you should place items that are not intended for PureData but will be utilized to enhance the website's appearance. For instance, I use this folder to store <code>.svg</code> files of my scores, which I then display in the piece work in progress Compiled I.</p> </li> </ul> <p>After you compile your patch, will be created in the ROOT of the project a file <code>index.html</code> and a new folder called <code>WebPatch</code>. All things that matter are inside the <code>WebPatch</code>. </p>"},{"location":"patch/compile/#how-to-use-abstractions","title":"How to use Abstractions?","text":"<p>Abstractions files must be inside <code>Libs</code> folder and be called as <code>Libs/myabs</code>. For now, use things like <code>declare -path Libs</code> and then trying to create <code>myabs</code> will not work!</p>"},{"location":"patch/compile/#compile-your-patch","title":"Compile your patch","text":"<p>To compile your <code>patch</code> using Pd you need to use the <code>pd4web</code> object and its help patch. To access it you can create a new patch, create the <code>pd4web</code> object, click with the right click on it, and click on help.</p> <p> </p>"},{"location":"patch/compile/#options","title":"Options","text":"<p>Follow the numbers to compile your patch:</p> <ul> <li> <p>Choose your patch file using the <code>green</code> button.</p> </li> <li> <p>From the <code>yellow</code> section, choose the memory size and the zoom level.</p> </li> <li>Compile your patch using the <code>red</code> button.</li> <li>Run the server using the <code>blue</code> button.</li> </ul> <p>You can also check the Template section to understand how to use templates.</p> <p>Before start a new project, always click on <code>Update pd4web package</code>.</p>"},{"location":"patch/gui/","title":"Gui","text":"<p> Here we list all the objects that are supported by the GUI module and how to use them inside your web patch.  </p> <p>Set Senders and Receivers for GUI Objects</p> <p>Again, to use any GUI object (except for <code>vu</code>), you must configure senders and receivers. This ensures all objects function properly and saves you from spending excessive time debugging your patch.</p> <ul> <li> <p> With <code>plaits~</code> from else <p> </p> <p> Check the website </p></p> </li> <li> <p> All Gui Objects <p> </p> <p> Check the website </p></p> </li> </ul> <p>pd4web just render GUI objects</p> <p><code>pd4web</code> don't render objects boxes, object connections, messages, or anything else. Just the GUI objects.</p>"},{"location":"patch/gui/#supported-gui-objects","title":"Supported Gui Objects","text":"<p>For now, just these objects are supported:</p> <ul> <li><code>bng</code>: Bang object;</li> <li><code>tgl</code>: Toggle object;</li> <li><code>nbx</code>: Number box object;</li> <li><code>vsl</code>: Vertical slider object;</li> <li><code>hsl</code>: Horizontal slider object;</li> <li><code>vradio</code>: Vertical radio object;</li> <li><code>hradio</code>: Horizontal radio object;</li> <li><code>vu</code>: Vertical vu object;</li> <li><code>cnv</code>: Canvas object;</li> <li><code>text</code>: Comment object;</li> </ul> <p>From external libraries:</p> <ul> <li><code>else/knob</code>: Knob object;</li> <li><code>else/keyboard</code>: Keyboard object;</li> </ul>"},{"location":"patch/gui/#how-to-use-this-objects","title":"How to use this objects?","text":"<p>Thanks to <code>libpd</code>, <code>pd4web</code> intercepts the messages sent by the objects and sends them to the web patch. Connections can't be intercepted, so you need to use <code>send</code>, <code>s</code> or <code>receive</code>, <code>r</code> objects to connect the GUI objects. This is how you can use the <code>toggle</code> object:</p> <p>Don't use connections</p> <p>The connections between objects are not intercepted by <code>pd4web</code>. You need to use <code>send</code> and <code>receive</code> objects to connect the GUI objects.</p> <p> </p> <p>All <code>Gui</code> objects include options to <code>send</code> and <code>receive</code> symbols, which are essential for communication between the Pd Patch and the Website. </p> <ul> <li>Sending messages to the Pd Patch: Use the <code>send</code> symbol with a <code>receiver</code> or <code>r</code> object to send messages from the Website to the Pd Patch.  </li> <li>Sending messages to the Website: Use the <code>receive</code> symbol with a <code>send</code> or <code>s</code> object to send messages from the Pd Patch to the Website.</li> </ul> <p>Note that <code>pd4web</code> does not automatically intercept connections between objects, so you must explicitly use the <code>send</code> and <code>receive</code> objects to connect the GUI objects for proper communication between the Pd Patch and the Website.</p> <p>Set Senders and Receivers for GUI Objects</p> <p>Again, to use any GUI object (except for <code>vu</code>), you must configure senders and receivers. This ensures all objects function properly and saves you from spending excessive time debugging your patch.</p>"},{"location":"patch/install/","title":"Installation","text":"<p>   To compile you first patch, first you need to install <code>pd4web</code> and <code>python</code>. You can use a PureData patch or a Python package. </p>"},{"location":"patch/install/#pd-patch-graphical-interface","title":"Pd Patch (Graphical Interface)","text":"<p>Simple Gui Interface to use <code>pd4web</code>.</p> <ul> <li> <p> How to Install?</p> <p>To use the <code>pd4web</code> object in PureData, follow these steps:</p> <ul> <li> <p><p> Install PureData and    Python    (bottom of the page). </p></p> </li> <li> <p>Open PureData.</p> </li> <li>Navigate to Help Find Externals.</li> <li>Search for <code>pd4web</code>.</li> <li>Click the Install button.</li> </ul> </li> <li> <p> Gui Interface</p> <p><p> </p></p> </li> </ul>"},{"location":"patch/install/#python-package-command-line","title":"Python Package (Command Line)","text":"<p>Prefer the Command Line? Here's How</p> <p>If you're comfortable with the command line, you can use the <code>pd4web</code> package to compile your patches efficiently.</p> <ul> <li> <p> Set up in 10 seconds</p> <p>Use pip to install the <code>pd4web</code> package:</p> <pre><code>pip install pd4web\n</code></pre> </li> <li> <p> Command Line Use</p> <p>You will get a executable script called <code>pd4web</code>.</p> <pre><code>usage: pd4web.py &lt;PureData Patch&gt;\n</code></pre> </li> </ul> <p>Run the command <code>pd4web &lt;PureData Patch&gt;</code> to compile your patch. The options are:</p> <ul> <li><code>--template &lt;TEMPLATE_NUMBER&gt;</code> : Specify the template number.</li> <li><code>--memory &lt;MEMORY_SIZE&gt;</code> : Specify the memory size in megabytes (MB).</li> <li><code>--clean</code> : Clean the output directory before compiling. </li> <li><code>--verbose</code> or <code>-v</code> : Show verbose output.</li> <li><code>--nogui</code> : Do not show the GUI.</li> <li><code>--patch-zoom &lt;ZOOM&gt;</code> : Specify the patch zoom level.</li> <li><code>--debug</code> : Compile the website with debugging information.</li> <li><code>--run-browser</code> : Run browser (this will not compile the patch).</li> </ul>"},{"location":"patch/problems/compilation/","title":"Compilation","text":"Compilation problems <p>If you have problems to compile, the easiear way to solve is to report what is the problem using the GitHub issues. </p> <p>How to report?</p> <p><p>Create a new issue on Github\" or use Google Forms.</p></p> <ul> <li> Object not found:<ul> <li>Solution: You must remove the object not found. If it is in a library that is supported, report the issue.</li> </ul> </li> <li> Object not supported:<ul> <li>Solution: You must remove the object not supported.</li> </ul> </li> </ul> <ul> <li> <code>pd4web</code> can not process some object:<ul> <li>Solution: You must report the problem and the object. I probably never used this object.</li> </ul> </li> <li> Cmake configuration problems:<ul> <li>Solution: Try to delete the <code>Pd4Web</code>, <code>build</code> and <code>Webpatch</code>, then compile it again, on errors, report the issue. </li> </ul> </li> </ul> <ul> <li> Cmake compilation problems:<ul> <li>Solution: Report the issue, these errors should not happen!</li> </ul> </li> <li></li> </ul>"},{"location":"patch/problems/flutex/","title":"Flutex","text":"<code>flutex.c</code> problems <p>How to report?</p> <p><p>Create a new issue on Github\" or use Google Forms.</p></p> <p>If this happens, probably is because you are using some object that I don't use in my patches. So, you need to report this problem to me and I will try to solve this. </p> <p>To report the problem you must share the patch that is causing the problem, without the patch is impossible to solve the problem. You can always reduce the patch to the minimum size that is causing the problem. </p> <p>Usually, these problems have an error related with <code>flutex.c</code> file.</p>"},{"location":"patch/problems/memory/","title":"Memory","text":"Memory problems <p>How to report?</p> <p><p>Create a new issue on Github or use Google Forms.</p></p> <p>You need to define the size of memory of your patch, this is pretty simple. Big patches needs more memory, small patches needs less memory.</p> <p>If you run a big patch with a small memory size you will get one error like this:</p> <p>Aborted(Cannot enlarge memory arrays to size 134225920 bytes (OOM).</p> <p>If you see this, you need to increase the memory size. You can do this in the <code>pd4web</code> configuration, using the memory input on Pd patch or the <code>--memory</code> flag in the command line.</p>"},{"location":"patch/problems/where-they-live/","title":"Errors: where I see then?","text":"Errors: where I see then? <p>Errors, like the memory, flutex and others are displayed in the browser's console. To help me debug effectively, it's essential to check the console logs for your browser.</p>"},{"location":"patch/problems/where-they-live/#google-chrome-edge-brave-opera","title":"Google Chrome, Edge, Brave, Opera","text":"<ul> <li> <ul> <li>Open the browser and press <code>Ctrl + Shift + J</code> (Windows/Linux) or <code>Cmd + Option + J</code> (macOS).</li> <li>Alternatively, go to the menu: 1)  Click on the three-dot menu in the top-right corner. 2) Navigate to More Tools &gt; Developer Tools. 3) - Select the Console tab.</li> </ul> </li> </ul>"},{"location":"patch/problems/where-they-live/#mozilla-firefox","title":"Mozilla Firefox","text":"<ul> <li><ul> <li>Open the browser and press <code>Ctrl + Shift + K</code> (Windows/Linux) or <code>Cmd + Option + K</code> (macOS).</li> <li>Alternatively, go to the menu:     Click on the hamburger menu in the top-right corner.     Navigate to Web Developer &gt; Console.</li> </ul> </li> </ul> <p>Pro Tip</p> <p>Ensure to capture any errors or warnings displayed in the console. Screenshots or copied text can help us analyze the issue faster.</p>"},{"location":"patch/templates/","title":"Complet Template List","text":"<p>Website templates are predefined websites that can be used to expand what you can do with <code>pd4web</code>. In basic terms, I do the code stuff and you do the creative stuff. You can use the templates to create your own website, and you can also create your own templates to share with the community.</p> <ul> <li> <code>1</code> - Patch + Score</li> <li> <code>2</code> - Hand detection (AI)</li> </ul> <ul> <li> <code>3</code> - Choir</li> <li> <code>4</code> - pd4web + p5js</li> </ul> <ul> <li> <code>5</code> - Tutorial patches</li> <li> <code>5</code> - Tutorial patches</li> </ul>"},{"location":"patch/templates/1-score/","title":"Template <code>1</code>: Patch + Score","text":"<p>In this template you have access to a patch that receives image files (from scores) and renders it side by side with your patch. The result will be something like this:</p> <p>Click in the image to open the example in a new tab</p> <p> </p> <p> Download Patch Template </p> <p>Compile using the template mode <code>1</code></p>"},{"location":"patch/templates/1-score/#what-should-your-patch-include","title":"What should your patch include?","text":"<p>You make your patch and the score file can be set using the object <code>[s pd4web-score]</code>. I recomend to use svg files, but you can use any image file (.png, .jpeg). </p> <ul> <li>These files must be inside the <code>WebPatch</code> folder. For example, if the score image is called <code>score-measure1.png</code>, you will send to <code>[s pd4web-score]</code> the message <code>symbol score-measure1.png</code>. </li> </ul> <p>Don't forget the <code>symbol</code> word before the file</p>"},{"location":"patch/templates/1-score/#extra-options","title":"Extra options","text":"<p>After compile the patch, you will see that, inside the folder <code>WebPatch</code>, will have a file called <code>bula.md</code>. Inside this file, you can write some description about your piece. The file uses markdown to render, you can check the complet syntax in https://www.markdownguide.org/basic-syntax/. Below the example of main command:</p> <pre><code># Title 1\n## Title 2\n### Title 3\n\n**bold text**\n*italic text**\n\n* this one item\n* this is another item\n</code></pre>"},{"location":"patch/templates/2-hands/","title":"Template <code>2</code>: Hand detection","text":"<p>In this template you have access to the library <code>ml5.js</code>. It is based on the library <code>tensorflow.js</code> and it is used to use machine learning models inside the browser. In this case, we are going to use the <code>handpose</code> model to detect the hands in the live-video. You can read more about it on ml5 website.</p> <p>The result will be something like this:</p> <p> </p> <p> Download Patch example </p>"},{"location":"patch/templates/2-hands/#what-should-your-patch-include","title":"What should your patch include?","text":"<p>You patch must have some receivers using the <code>L-</code> and <code>R-</code> preffixes to receive the data from the hands followed by the number of the position you want, following the image below:</p> <p> </p> <p> Download Patch example </p> <p>For example, to receive the data from where is the <code>INDEX_FINGER_TIP</code> for the <code>LEFT</code> hand you must use the object <code>[r L-8]</code> in your patch.</p> <p>From these receivers, you will get two numbers, <code>x</code> and <code>y</code>, inside a list. These numbers represent the position of your hand relative to your real-time video.</p> <ul> <li>X Position: <code>0</code> is the top and <code>1</code> is the bottom.</li> <li>Y Position: <code>0</code> is the left and <code>1</code> is the right.</li> </ul> <p>In summary, <code>[x, y]</code> defines the hand's position within a coordinate system where <code>(0,0)</code> is the top-left corner and <code>(1,1)</code> is the bottom-right corner of the image.</p> <p>If you download the example patch and use the information above, you'll see that we can use the following object to detect if your finger is in the top-left corner of the image:</p> <pre><code>[expr if($f1 &lt; 0.2 &amp;&amp; $f2 &lt; 0.2, 1, 0)]\n</code></pre> <p>In this expression: - <code>$f1</code> represents the <code>x</code> coordinate (vertical position). - <code>$f2</code> represents the <code>y</code> coordinate (horizontal position).</p> <p>This expression checks if: - <code>$f1</code> is less than <code>0.2</code> (meaning your hand is near the top of the image). - <code>$f2</code> is less than <code>0.2</code> (meaning your hand is near the left side of the image).</p> <p>If both conditions are true, the output will be <code>1</code> (indicating your finger is in the top-left corner). Otherwise, the output will be <code>0</code>.</p>"},{"location":"patch/templates/3-choir/","title":"Template <code>3</code>: Choir and Phones","text":"<p>This template is just a reuse of the template used in the pieces <code>Moteto (2023)</code> and <code>Pandem\u00f4nico (2024)</code>. Pieces for choir and smartphone. Where you can do some patch with guide notes (or just the score) for the singer.</p> <p>The result will be something like this:</p> <p> </p> <p> Download Patch example </p>"},{"location":"patch/templates/3-choir/#what-should-your-patch-include","title":"What should your patch include?","text":"<p>In your patch, you have these options to set using senders, for example, <code>[s composer</code>], <code>[s title]</code>, <code>[s duration-bar]</code>, <code>[s piece-duration-bar]</code>, <code>[s poem-phrase]</code> and <code>[s pitch-syl]</code>:</p> <ul> <li><code>composer</code>: The composer name;</li> <li><code>title</code>: Title of the piece;</li> <li><code>duration-bar</code>: A number between 0 and 100 for the bar line (control the bar above the score);</li> <li><code>piece-duration-bar</code>: A number between 0 and 100 for the bar line (control the bar below the phrase);</li> <li><code>poem-phrase</code>: The complete phrase of the poem (or anything else), for example <code>minha frase</code>.</li> <li><code>pitch-syl</code>: A list with the pitchname and the syllable, for example <code>C4 fra</code>.</li> </ul> <p>In your patch, you have these options to set using receivers, for example, <code>[r naipe]</code>:</p> <ul> <li><code>naipe</code>. Receive the naipe choosen by the singer, 1 for Baixo, 2 for Tenor, 3 for Contralto and 4 for Soprano.</li> </ul> <p>Check the website of Pandemonio to see how it works.</p>"},{"location":"patch/templates/4-p5js/","title":"Template <code>4</code>: p5js and pd4web","text":"<p>Template designed for those who know how to program</p> <p>Learn how to program, I really recommend watch the Coding Train channel. It is a great channel to learn how to program in a fun way. </p> <p>This template is for the combination of <code>p5js</code> and <code>pd4web</code>. It is a simple template that uses the <code>p5js</code> library to create a canvas and pd4web to create a patch that can be used to control the canvas (or vice-versa).</p> <p> </p> <p> Download Patch Template </p> <p>There is no much to say about this template, it just use a personalized <code>index.html</code> and <code>sketch.js</code>, where you can code you <code>p5js</code> code. </p> <p>Just download and have fun. If you have any question, please, let me know. If you have some questions about <code>p5js</code> or <code>pd4web</code> you can ask me too. I will be glad to help you.</p> <p>Always check if <code>Pd4Web</code> is defined and not <code>null</code></p> <p>Always check if the <code>Pd4Web</code> object is defined before using it. This is because the <code>Pd4Web</code> object is only defined when the patch is loaded, which happens when the user click in the sound icon. <pre><code>if (Pd4Web !== null &amp;&amp; typeof Pd4Web !== \"undefined\") {\n  Pd4Web.sendList(\"myList \", [1, 2, 3]);\n}\n</code></pre></p>"},{"location":"patch/templates/5-tutorial/","title":"Template <code>5</code>: Tutorial Patches","text":"<p>Patch side by side with some text to explain the patch. The result will be something like this:</p> <p> </p> <p>To make the description again we use a markdown file. The markdown is called <code>tutorial.md</code> and is located in the <code>WebPatch</code> folder. The content of the file should be edited after compilation of the patch.</p> <p>As in the previous template, inside <code>tutorial.md</code> you can write some description about the patch. The file uses markdown to render, you can check the complet syntax in https://www.markdownguide.org/basic-syntax/. Below the example of main command:</p> <pre><code># Title 1\n## Title 2\n### Title 3\n\n**bold text**\n*italic text**\n\n* this one item\n* this is another item\n</code></pre>"},{"location":"patch/templates/templates/p5js/bula/","title":"by ChatGpt","text":"<p>\"Spectral Echoes\" is an immersive electroacoustic composition that blends live instruments with pre-recorded electronic sounds and real-time audio processing. To ensure the best experience, follow these setup and performance instructions:</p>"},{"location":"patch/templates/templates/p5js/bula/#equipment-needed","title":"Equipment Needed","text":"<ul> <li>Audio Interface: A multi-channel audio interface.</li> <li>Speakers: A quadraphonic speaker setup (four speakers positioned in a square around the audience) for spatial audio diffusion.</li> <li>Microphones: One or two condenser microphones for capturing live instruments.</li> <li>Cables: Ensure all necessary audio cables (XLR, TRS, and USB) are available.</li> </ul>"},{"location":"patch/upload/cloudflare/","title":"Cloudflare","text":""},{"location":"patch/upload/cloudflare/#upload-files","title":"Upload files","text":"<ul> <li>Create a new account on Cloudflare.</li> </ul> <ul> <li>After creating your account, go to this link and search for <code>Workers and Pages</code>, click on it.</li> </ul> <ul> <li>Click on the <code>Create</code> and then, in the <code>Pages</code> section, click on the <code>Upload assets</code> button.</li> </ul> <ul> <li>Select the project name, your website will be <code>&lt;project-name&gt;.pages.dev</code>. Then click on the <code>Create Project</code> button.</li> </ul> <ul> <li>Then, inside the <code>WebPatch</code> folder, select all files and create a zip file. After that, upload the zip file to the Cloudflare. </li> </ul>"},{"location":"patch/upload/cloudflare/#publish-your-patch","title":"Publish your patch","text":"<ul> <li>Click on the <code>Deploy site</code> button and wait a few seconds (this can take 5 minutes). You will see a link to your patch. </li> </ul>"},{"location":"patch/upload/github/","title":"Github","text":""},{"location":"patch/upload/github/#upload-files","title":"Upload files","text":"<ul> <li>To upload your patch on Github, first you need a Github account. If you don't have one, you can create it here. Be sure to use a good username, your website will be <code>&lt;username&gt;.github.io</code>. </li> </ul> <ul> <li>After creating your account, you can create a new repository, you can use this link. Be sure to use a good name for your repository, your patch will be available at <code>&lt;username&gt;.github.io/&lt;repository-name&gt;</code>. After all configuration, click on the <code>Create repository</code> button.</li> </ul> <ul> <li>After creating your repository, you will see a weird page with a lot of information. You can ignore all of this and search for the link <code>uploading an existing file</code>. Click on it.</li> </ul> <ul> <li>After clicking on the link, you will see a page with a box to drag and drop your files. Upload all files inside the <code>Webpatch</code> folder. You can select all files and drag them to the box. After that, you can click on the <code>Commit changes</code> button.</li> </ul> <p>   Wait a few seconds to see your files on the repository. </p>"},{"location":"patch/upload/github/#publish-your-patch","title":"Publish your patch","text":"<ul> <li>From your repository page, click on the <code>Settings</code> tab. After that, scroll down to the <code>Pages</code> section. On the section <code>Build and deployment</code>, select the branch <code>main</code> and the folder <code>/root</code>. After that, click on the <code>Save</code> button. </li> </ul> <p>Wait a few seconds and you will see a link to your patch. You can access your patch using the link <code>&lt;username&gt;.github.io/&lt;repository-name&gt;</code>.</p> <p>Save button not working?</p> <p>Sometimes the <code>Save</code> button does not become available for the <code>/root</code>, change from <code>main</code> to <code>None</code> then <code>Save</code>, after that, change back to <code>main</code> and <code>Save</code> again.</p>"},{"location":"patch/upload/others/","title":"Others","text":"<p>There is a lot of ways to upload your patch, you can use Github, Cloudflare, or even your own server. <code>Github</code> and <code>Cloudflare</code> are the easiest ways to do it in my opinion. Here some lists of options:</p> <ul> <li>Gitlab</li> <li>Bitbucket</li> <li>Heroku</li> <li>Netlify</li> <li>Vercel</li> <li>Surge</li> </ul>"}]}