---
name: C/C++ CI
on:
  workflow_dispatch:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
env:
  LIBNAME: pd4web
jobs:
  macos-universal-build:
    strategy:
      matrix:
        os: [macos-latest, macos-13]
        precision: [32, 64]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install PureData and Deps
        run: |
          brew install --cask pd
      - name: Build Object for Intel
        run: |
          cmake ./Resources/Pd/ -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPDLIBDIR=./
          cmake --build build -j $(sysctl -n hw.logicalcpu)
          cmake --install build
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-${{matrix.os}}-${{matrix.precision}}
          path: ${{env.LIBNAME}}
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]
        precision: [32]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install PureData
        shell: pwsh
        run: |
            Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-0.55-2.msw.zip" -OutFile "pure-data.zip"
            Expand-Archive -Path pure-data.zip -DestinationPath "$PWD\pd-temp"
            Remove-Item pure-data.zip
            Move-Item -Path "$PWD\pd-temp\pd-0.55-2\*" -Destination "C:\Program Files\Pd"
            Remove-Item -Recurse -Force "$PWD\pd-temp"
      - name: Configure and build
        shell: pwsh
        run: |
          $libDir = Resolve-Path "./pd"
          cmake -S Resources/Pd -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPD_INSTALL_LIBS=True -DPDLIBDIR=$libDir
          cmake --build build --config Release
          cmake --install build --config Release
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-f${{ matrix.precision }}-windows-${{ matrix.compiler }}
          path: ./pd

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, aarch64, arm]
        precision: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: PureData Sources
        run: |
          sudo apt update
          sudo add-apt-repository ppa:pure-data/pure-data -y
          sudo apt install puredata -y
          # Add here dynamic libraries that you use (ex. fftw3, gsl, ...).
          # search for the name in https://packages.ubuntu.com/search
      - name: Install aarch64 gcc
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install g++-aarch64-linux-gnu -y
      - name: Install arm gcc
        if: matrix.arch == 'arm'
        run: |
          sudo apt install gcc-arm-linux-gnueabihf -y
          sudo apt install g++-arm-linux-gnueabihf -y
      - name: Build Object
        if: matrix.arch == 'amd64'
        run: |
          cmake ./Resources/Pd/ -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPD_INSTALL_LIBS=True -DPDLIBDIR=./
          cmake --build build -- -j$(nproc)
          cmake --install build
      - name: Build Object
        if: matrix.arch == 'aarch64'
        run: |
          cmake ./Resources/Pd/ -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DPD_INSTALL_LIBS=True -DPDLIBDIR=./
          cmake --build build -- -j$(nproc)
          cmake --install build
      - name: Build Object
        if: matrix.arch == 'arm'
        run: |
          cmake ./Resources/Pd/ -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=arm -DPD_INSTALL_LIBS=True -DPDLIBDIR=./
          cmake --build build -- -j$(nproc)
          cmake --install build
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-linux-${{matrix.arch}}-${{matrix.precision}}
          path: ${{env.LIBNAME}}
  package-artifacts:
    needs: [macos-universal-build, windows-build, linux-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.LIBNAME }}-*
          path: artifacts
          merge-multiple: true
      - name: Clear tmp files
        run: rm -f artifacts/*.pdb
      - name: Upload artifacts zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-ALL-binaries
          path: artifacts
