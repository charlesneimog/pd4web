---
name: PureData Pd4Web Compiler
on:
  workflow_dispatch:
  push:
    branches: [main]
env:
  BUILD_TYPE: Debug
jobs:
  pd4web-compiler:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        #os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Restore sccache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache/restore@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\sccache
          key: sccache-windows-v2-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}-${{
            github.sha }}
          restore-keys: |
            sccache-windows-v2-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}-
            sccache-windows-v2-
      - name: Setup ccache (macOS/Linux)
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Setup sccache (Windows)
        if: runner.os == 'Windows'
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: build
          key: build-v3-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt',
            '**/*.cmake') }}-${{ github.sha }}
          restore-keys: |
            build-v3-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt', '**/*.cmake') }}-
            build-v3-${{ runner.os }}-${{ env.BUILD_TYPE }}-
      - name: Install NASM (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/setup-nasm@v1
      - name: Install Perl and Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install strawberryperl -y
          choco install ninja -y
          perl -v
          nasm -v
          ninja --version
          where nasm
          where perl
          where ninja
      - name: Install PureData for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          winget install -e --id MillerPuckette.PureData --accept-source-agreements --accept-package-agreements
      - name: Install PureData for macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --cask pd
          brew install ccache || true
          rm -dfr build
      - name: Install PureData for Linux
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y software-properties-common ccache
          sudo add-apt-repository ppa:pure-data/pure-data -y || true
          sudo apt-get update
          sudo apt-get install -y puredata
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -S . -B build `
            -DPDLIBDIR=${{ github.workspace }} `
            -DCMAKE_C_COMPILER_LAUNCHER=sccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}"
      - name: Disable openssl3
        if: runner.os == 'macOS'
        run: |
          brew uninstall --ignore-dependencies openssl@3
      - name: Configure (macOS/Linux)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build -DPDLIBDIR=./ -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config $env:BUILD_TYPE --parallel $env:NUMBER_OF_PROCESSORS

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          cmake --build build -- -j$(nproc)


      - name: Build on macOS
        if: runner.os == 'macOS'
        run: cmake --build build -- -j$(sysctl -n hw.ncpu)

      - name: Install
        run: |
          cmake --install build --config ${{ env.BUILD_TYPE }}
      - name: Save build cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: build
          key: build-v3-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt',
            '**/*.cmake') }}-${{ github.sha }}
      - name: Upload Object (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: pd4web
      - name: Upload Object (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: ${{ github.workspace }}\pd4web

      - name: Upload Python Module
        uses: actions/upload-artifact@v4
        with:
          name: pd4web-${{ matrix.os }}
          path: ${{ github.workspace }}/build/dist/pd4web 

